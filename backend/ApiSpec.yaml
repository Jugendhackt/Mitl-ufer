openapi: 3.0.0
servers:
  - url: http://172.22.42.100:8080/
info:
  description: This is the public API of Mitl-ufer
  version: "1.0.0"
  title: Mitl-ufer public API
  contact:
    email: tobrohl@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /login:
    post:
      summary: Logs you in
      description: Creates a cookie providing authentication
      parameters:
        - in: query
          name: username
          description: the username you entered on Account creation
          schema:
            type: string
        - in: query
          name: password
          description: the password you choose
          schema:
            type: string
      responses:
        '200':
          description: >
            Successfully authenticated.
            The session ID is returned in a cookie named `JSESSIONID`. You need to include this cookie in subsequent requests.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly
        '201':
          description: Invalid credentials
  /user:
    put:
      summary: changes your user
      description: Changes your own user
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: newUserData
          description: The new userdata
          schema:
            $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User updated
        '400':
          description: 'invalid input, object invalid'
        '403':
          description: You are not allowed to do that

  /users/getSearch:
    get:
      summary: searches user Database
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string fo
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: bad input parameter
  /users/getAll:
    get:
      summary: Returns all users
      description: By passing in the appropriate options, you can search for
        available inventory in the system
      responses:
        '200':
          description: All users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /createAccount:
    post:
      summary: adds an user

      description: Adds an user to the system
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
        '409':
          description: an existing item already exists
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: User to add
components:
  securitySchemes:
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: JSESSIONID  # cookie name
  schemas:
    User:
      type: object
      required:
        - name
        - laufort
        - eMail
        - laufniveau
        - geburtsdatum
        - geschlecht
        - ziel
        - profilbild
      properties:
        name:
          type: string
          example: HalloWelt
        laufort:
          type: string
          example: 32657
        eMail:
          type: string
          example: DeineAdresse@gmail.com
        geburtsdatum:
          type: string
          format: date
          example: 27.01.2003
        laufniveau:
          type: string
          enum: &Laufniveau
            - Anfaenger
            - Fortgeschritten
            - Profi
        ziel:
          type: integer
        profilbild:
          type: string
          example: Not implemented yet
/*
 * Mitl-ufer public API
 *
 * This is the public API of Mitl-ufer
 *
 * OpenAPI spec version: 1.0.0
 * Contact: tobrohl@gmail.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class OpenApiController : ControllerBase
    { 
        /// <summary>
        /// adds an user
        /// </summary>
        /// <remarks>Adds an user to the system</remarks>
        /// <param name="user">User to add</param>
        /// <response code="201">item created</response>
        /// <response code="400">invalid input, object invalid</response>
        /// <response code="409">an existing item already exists</response>
        [HttpPost]
        [Route("/CreateAccount")]
        [ValidateModelState]
        [SwaggerOperation("AddUser")]
        public virtual IActionResult AddUser([FromBody]User user)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);


            throw new NotImplementedException();
        }

        /// <summary>
        /// searches user Database
        /// </summary>
        /// <remarks>By passing in the appropriate options, you can search for available inventory in the system </remarks>
        /// <param name="searchString">pass an optional search string fo</param>
        /// <param name="skip">number of records to skip for pagination</param>
        /// <param name="limit">maximum number of records to return</param>
        /// <response code="200">search results matching criteria</response>
        /// <response code="400">bad input parameter</response>
        [HttpGet]
        [Route("/users")]
        [ValidateModelState]
        [SwaggerOperation("SearchUserDatabase")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<User>), description: "search results matching criteria")]
        public virtual IActionResult SearchUserDatabase([FromQuery]string searchString, [FromQuery]int? skip, [FromQuery][Range(0, 50)]int? limit)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<User>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            string exampleJson = null;
            exampleJson = "{\r\n  \"geburtsdatum\" : \"2000-01-23\",\r\n  \"laufniveau\" : \"Anfaenger\",\r\n  \"name\" : \"HalloWelt\",\r\n  \"geschlecht\" : \"Mann\",\r\n  \"laufort\" : 32657,\r\n  \"profilbild\" : \"Not implemented yet\",\r\n  \"eMail\" : \"DeineAdresse@gmail.com\",\r\n  \"ziel\" : 0\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<User>>(exampleJson)
            : default(List<User>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
